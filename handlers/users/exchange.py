from aiogram import types
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hlink, hcode

from data import config
from keyboards.inline.callback_datas import set_callback, set_byi_sell, set_paid
from keyboards.inline.exchange import keybord_exchange, keyboard_shopping, keybord_back_area, keyboard_aplly_bying, \
    paid_keyboard
from loader import dp
from aiogram.dispatcher import FSMContext

from utils.misc.binance import StockExchange
from utils.db_api import quick_commands as commands
from utils.misc.qiwi import Payment, NoPaymentFound, NotEnoughMoney

crypto = StockExchange()


@dp.message_handler(text="üîÅ –û–±–º–µ–Ω")
async def show_menu_exchange(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å", reply_markup=keybord_exchange)

    # await message.answer(f"–ë–∏—Ç–∫–æ–∏–Ω {crypto.get_address('BTC')}")
    # await message.answer(f"–≠—Ñ–∏—Ä {crypto.get_address('ETH')}")
    # await message.answer(f"–°–æ–ª–∞–Ω–∞ {crypto.get_address('SOL')}")
    # await message.answer(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 BTC = {crypto.get_course('BTC')}.0 RUB")
    # await message.answer(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 ETH = {crypto.get_course('ETH')}.0 RUB")
    # await message.answer(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 SOL = {crypto.get_course('SOL')}.0 RUB")
    # await message.answer("–¢–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫: https://www.binance.com", disable_web_page_preview=True)


@dp.callback_query_handler(set_callback.filter(text_name="exchange"))
async def show_set_exchange(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer(cache_time=60)
    await call.message.delete()
    user = await commands.select_user(call.message.chat.id)
    print(user)
    currency = callback_data.get("purse")
    if currency == "BTC":
        if user.btc:
            await answer(call, currency)
        else:
            await answer_eror(call, currency)
    elif currency == "ETH":
        if user.eth:
            await answer(call, currency)
        else:
            await answer_eror(call, currency)
    elif currency == "SOL":
        if user.sol:
            await answer(call, currency)
        else:
            await answer_eror(call, currency)

    # await state.update_data(currency=currency)
    # await state.set_state("ask")
    # await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞  {currency}")


async def answer(call: CallbackQuery, currency):
    await call.message.answer(f'–ö—É—Ä—Å: 1 {currency} = {crypto.get_course(currency)}.0 RUB',
                              reply_markup=keyboard_shopping(currency))


async def answer_eror(call: CallbackQuery, currency):
    await call.message.answer(f'–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ {currency} –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ',
                              reply_markup=keybord_back_area)


@dp.callback_query_handler(text="backmenuexchange")
async def back_menu_exchange(call: CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.delete()
    await call.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å", reply_markup=keybord_exchange)


@dp.callback_query_handler(text="backmenuexchange", state="paid")
async def back_menu_paid(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await call.message.delete()
    await call.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å", reply_markup=keybord_exchange)
    await state.finish()


@dp.callback_query_handler(set_callback.filter(text_name="buy"))
async def buy_currency(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer(cache_time=60)
    await call.message.delete()
    user = await commands.select_user(call.message.chat.id)
    currency = callback_data.get("purse")
    minsumm = 1500 / crypto.get_course(currency)
    maxsum = 1000000 / crypto.get_course(currency)
    is_sell = False
    if 'BTC' == currency:
        await buy_currency_show(call, currency, minsumm, user.btc, is_sell, maxsum)
    if 'ETH' == currency:
        await buy_currency_show(call, currency, minsumm, user.eth, is_sell, maxsum)
    if 'SOL' == currency:
        await buy_currency_show(call, currency, minsumm, user.sol, is_sell, maxsum)

    await state.update_data(currency=currency)
    await state.update_data(minsumm=round(minsumm, 6))
    await state.update_data(maxsum=round(maxsum, 6))
    await state.set_state('bying')


@dp.message_handler(state='bying')
async def buying_currency(message: types.Message, state: FSMContext):
    data = await state.get_data()
    currency = data.get("currency")
    minsumm = data.get("minsumm")
    maxsum = data.get("maxsum")
    operation = "buy"
    try:
        if minsumm > float(message.text):
            await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {minsumm}\n"
                                 f"\n"
                                 f"–í–≤–¥–µ–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É\n"
                                 f"\n"
                                 )
            await state.set_state('bying')
        elif maxsum < float(message.text):
            await message.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {maxsum}\n"
                                 f"\n"
                                 f"–í–≤–¥–µ–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É\n"
                                 f"\n"
                                 )
            await state.set_state('bying')
        else:
            summ = crypto.get_course(currency) * float(message.text)
            await message.answer(f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω—É–∂–Ω–æ {round(summ)}.0 RUB"
                                 f"\n"
                                 f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=keyboard_aplly_bying(round(summ), operation))
            await state.finish()
    except:
        await message.answer(f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É."
                             f"\n"
                             f"–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—É–º–º—ã: {minsumm}")


async def buy_currency_show(call: CallbackQuery, currency, minsumm, wallet, is_sell, maxsum):
    if is_sell:
        await call.message.answer(f"–í–≤–¥–∏—Ç–µ —Å—É–º–º—É –≤ {currency} –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å\n"
                                  f"\n"
                                  f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏: {round(minsumm, 6)}"
                                  f"\n"
                                  f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏: \n"
                                  f"\n"
                                  f"–í–∞—à –∫–æ—à–ª–µ–∫ –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è QIWI: {wallet}")
    else:
        await call.message.answer(f"–í–≤–¥–∏—Ç–µ —Å—É–º–º—É –≤ {currency} –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏\n"
                                  f"\n"
                                  f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {round(minsumm, 6)}"
                                  f"\n"
                                  f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {round(maxsum, 6)}\n"
                                  f"\n"
                                  f"–í–∞—à –∫–æ—à–ª–µ–∫ –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è {currency}: {wallet}")


@dp.callback_query_handler(set_callback.filter(text_name="sell"))
async def sell_currency(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer(cache_time=60)
    await call.message.delete()
    user = await commands.select_user(call.message.chat.id)
    currency = callback_data.get("purse")
    minsumm = 1500 / crypto.get_course(currency)
    is_sell = True
    if user.qiwi:
        await buy_currency_show(call, currency, minsumm, user.qiwi, is_sell)
        await state.update_data(currency=currency)
        await state.update_data(minsumm=round(minsumm, 6))
        await state.set_state('sell')
    else:
        await answer_eror(call, currency)


@dp.message_handler(state='sell')
async def buying_currency(message: types.Message, state: FSMContext):
    data = await state.get_data()
    currency = data.get("currency")
    minsumm = data.get("minsumm")
    operation = "sell"
    try:
        if minsumm > float(message.text):
            await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {minsumm}\n"
                                 f"\n"
                                 f"–í–≤–¥–µ–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É\n"
                                 f"\n"
                                 )
            await state.set_state('selling')
        else:
            summ = crypto.get_course(currency) * float(message.text)
            await message.answer(f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ {round(summ)}.0 RUB –Ω–∞ –≤–∞—à QIWI –∫–æ—à–µ–ª–µ–∫"
                                 f"\n"
                                 f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                                 reply_markup=keyboard_aplly_bying(round(summ), operation=operation))
            await state.finish()
            await state.set_state('sell')
    except:
        await message.answer(f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É."
                             f"\n"
                             f"–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—É–º–º—ã: {minsumm}")


@dp.callback_query_handler(set_byi_sell.filter(text_name="final"))
async def show_payment(call: CallbackQuery, callback_data: dict, state: FSMContext):
    summ = callback_data.get("purse")
    operation = callback_data.get("operation")
    payment = Payment(amount=summ)
    payment.create()
    if operation == "buy":
        await call.message.answer(
            "\n".join(
                [
                    f"–û–ø–ª–∞—Ç–∏—Ç–µ –Ω–µ –º–µ–Ω–µ–µ {summ} —Ä—É–± –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ –∞–¥—Ä–µ—Å—É",
                    "",
                    f"–°—Å—ã–ª–∫–∞: {hlink(config.WALLET_QIWI, url=payment.invoice)}",
                    "",
                    "‚ÄºÔ∏è –ò –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞:",
                    hcode(payment.id)
                ]
            ),
            reply_markup=paid_keyboard()
        )
        await state.set_state("paid")
        await state.update_data(payment=payment)


@dp.callback_query_handler(set_paid.filter(text_name="paid"), state="paid")
async def show_paid(call: CallbackQuery, callback_data: dict, state: FSMContext):
    data = await state.get_data()
    payment: Payment = data.get("payment")
    try:
        payment.check_payment()
    except NoPaymentFound:
        await call.message.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", reply_markup=paid_keyboard())

    except NotEnoughMoney:
        await call.message.answer("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥", reply_markup=paid_keyboard())

    else:
        await call.message.answer(f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"
                                  f"\n"
                                  f"–í–∞–ª—é—Ç–∞ –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∞ –≤ —Ç–µ—Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç",
                                  reply_markup=keybord_exchange)
        await state.finish()
