from aiogram import types
from aiogram.types import CallbackQuery

from keyboards.inline.callback_datas import set_callback
from keyboards.inline.exchange import keybord_exchange, keyboard_shopping, keybord_back_area
from loader import dp
from aiogram.dispatcher import FSMContext

from utils.misc.binance import StockExchange
from utils.db_api import quick_commands as commands

crypto = StockExchange()


@dp.message_handler(text="üîÅ –û–±–º–µ–Ω")
async def show_menu_exchange(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å", reply_markup=keybord_exchange)

    # await message.answer(f"–ë–∏—Ç–∫–æ–∏–Ω {crypto.get_address('BTC')}")
    # await message.answer(f"–≠—Ñ–∏—Ä {crypto.get_address('ETH')}")
    # await message.answer(f"–°–æ–ª–∞–Ω–∞ {crypto.get_address('SOL')}")
    # await message.answer(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 BTC = {crypto.get_course('BTC')}.0 RUB")
    # await message.answer(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 ETH = {crypto.get_course('ETH')}.0 RUB")
    # await message.answer(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 SOL = {crypto.get_course('SOL')}.0 RUB")
    # await message.answer("–¢–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫: https://www.binance.com", disable_web_page_preview=True)


@dp.callback_query_handler(set_callback.filter(text_name="exchange"))
async def show_set_exchange(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer(cache_time=60)
    await call.message.delete()
    user = await commands.select_user(call.message.chat.id)
    print(user)
    currency = callback_data.get("purse")
    if currency == "BTC":
        if user.btc:
            await answer(call, currency)
        else:
            await answer_eror(call, currency)
    elif currency == "ETH":
        if user.eth:
            await answer(call, currency)
        else:
            await answer_eror(call, currency)
    elif currency == "SOL":
        if user.sol:
            await answer(call, currency)
        else:
            await answer_eror(call, currency)

    # await state.update_data(currency=currency)
    # await state.set_state("ask")
    # await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞  {currency}")


async def answer(call: CallbackQuery, currency):
    await call.message.answer(f'–ö—É—Ä—Å: 1 {currency} = {crypto.get_course(currency)}.0 RUB',
                              reply_markup=keyboard_shopping(currency))


async def answer_eror(call: CallbackQuery, currency):
    await call.message.answer(f'–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ {currency} –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ',
                              reply_markup=keybord_back_area)


@dp.callback_query_handler(text="backmenuexchange")
async def back_menu_exchange(call: CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.delete()
    await call.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å", reply_markup=keybord_exchange)
