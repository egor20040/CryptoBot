from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hbold

from keyboards.inline.callback_datas import set_callback
from keyboards.inline.profile import keybord_profile
from loader import dp
import datetime as dt
from utils.db_api import quick_commands as commands


@dp.message_handler(text="üîê –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
async def show_menu(message: types.Message):
    user = await commands.select_user(message.from_user.id)
    bot_user = await dp.bot.get_me()
    btc = ''
    eth = ''
    qiwi = ''
    sol = ''
    if user.btc:
        btc = user.btc
    if user.eth:
        eth = user.eth
    if user.qiwi:
        qiwi = user.qiwi
    if user.sol:
        sol = user.sol

    now = dt.datetime.utcnow()
    created_at = user.created_at + dt.timedelta(hours=3)
    moscow_now = now + dt.timedelta(hours=3)
    start = moscow_now.date() - created_at.date()
    text = [
        f'üîê –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
        f'',
        f'{hbold("–í–∞—à id:")} {message.from_user.id}',
        f'{hbold("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:")} 0',
        f'{hbold("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")} {user.invited}',
        '',
        f'BTC –∫–æ—à–µ–ª–µ–∫: {btc}',
        '',
        f'ETH –∫–æ—à–µ–ª–µ–∫: {eth}',
        '',
        f'SOL –∫–æ—à–µ–ª–µ–∫: {sol}',
        '',
        f'QIWI –∫–æ—à–µ–ª–µ–∫: {qiwi}',
        f'',
        f'{hbold("–î–Ω–µ–π –≤ —Å–µ—Ä–≤–∏—Å–µ:")} {start.days}',
        f'',
        f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: http://t.me/{bot_user.username}?start={message.from_user.id}',
        f'',
        f'üîí –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã RSA-2048, DH-2048 –∏ AES —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º.',

    ]
    await message.answer('\n'.join(text), reply_markup=keybord_profile)


@dp.callback_query_handler(set_callback.filter(text_name="purse"))
async def show_set_menu(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer(cache_time=60)
    await call.message.delete()
    currency = callback_data.get("purse")
    await state.update_data(currency=currency)
    await state.set_state("ask")
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞  {currency}")


@dp.message_handler(state="ask")
async def update_currency(message: types.Message, state: FSMContext):
    data = await state.get_data()
    number = data.get("currency")
    await commands.update_purse(id=message.from_user.id, purse=message.text, currency=number)
    await message.answer(f"–í–∞—à {number} –∫–æ—à–µ–ª–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω")
    await state.finish()
    await show_menu(message)
