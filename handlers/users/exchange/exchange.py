from aiogram import types
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hlink, hcode

from data import config
from keyboards.inline.callback_datas import set_callback, set_byi_sell
from keyboards.inline.exchange import keybord_exchange, keyboard_shopping,  \
    paid_keyboard, keyboard_add_currency
from loader import dp
from aiogram.dispatcher import FSMContext

from utils.misc.binance import StockExchange
from utils.db_api import quick_commands as commands
from utils.misc.qiwi import Payment

crypto = StockExchange()


@dp.message_handler(text="üîÅ –û–±–º–µ–Ω")
async def show_menu_exchange(message: types.Message):
    await message.answer("üîÅ –û–±–º–µ–Ω \n\n –í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å", reply_markup=keybord_exchange)


@dp.callback_query_handler(set_callback.filter(text_name="exchange"))
async def show_set_exchange(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    await call.message.delete()
    user = await commands.select_user(call.message.chat.id)
    currency = callback_data.get("purse")
    if currency == "BTC":
        if user.btc:
            await answer(call, currency)
        else:
            await answer_eror(call, currency)
    elif currency == "ETH":
        if user.eth:
            await answer(call, currency)
        else:
            await answer_eror(call, currency)
    elif currency == "SOL":
        if user.sol:
            await answer(call, currency)
        else:
            await answer_eror(call, currency)


async def answer(call: CallbackQuery, currency):
    await call.message.answer(f'–ö—É—Ä—Å: 1 {currency} = {crypto.get_course(currency)}.0 RUB',
                              reply_markup=keyboard_shopping(currency))


async def answer_eror(call: CallbackQuery, currency):
    await call.message.answer(f'–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ {currency} –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ',
                              reply_markup=keyboard_add_currency(currency))


@dp.callback_query_handler(text="backmenuexchange")
async def back_menu_exchange(call: CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.delete()
    await call.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å", reply_markup=keybord_exchange)


@dp.callback_query_handler(text="backmenuexchange", state="paid")
async def back_menu_paid(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await call.message.delete()
    await call.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å", reply_markup=keybord_exchange)
    await state.finish()


async def buy_currency_show(call: CallbackQuery, currency, minsumm, wallet, is_sell, maxsum):
    if is_sell:
        await call.message.answer(f"–í–≤–¥–∏—Ç–µ —Å—É–º–º—É –≤ {currency} –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å\n"
                                  f"\n"
                                  f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏: {round(minsumm, 6)}"
                                  f"\n"
                                  f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂–∏: {round(maxsum, 6)}\n"
                                  f"\n"
                                  f"–í–∞—à –∫–æ—à–ª–µ–∫ –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è QIWI: {wallet}")
    else:
        await call.message.answer(f"–í–≤–¥–∏—Ç–µ —Å—É–º–º—É –≤ {currency} –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏\n"
                                  f"\n"
                                  f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {round(minsumm, 6)}"
                                  f"\n"
                                  f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {round(maxsum, 6)}\n"
                                  f"\n"
                                  f"–í–∞—à –∫–æ—à–ª–µ–∫ –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è {currency}: {wallet}")


@dp.callback_query_handler(set_byi_sell.filter(text_name="final"))
async def show_payment(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer(cache_time=60)
    await call.message.delete()
    summ = callback_data.get("purse")
    operation = callback_data.get("operation")
    if operation == "buy":
        payment = Payment(amount=summ)
        payment.create()
        await call.message.answer(
            "\n".join(
                [
                    f"–û–ø–ª–∞—Ç–∏—Ç–µ –Ω–µ –º–µ–Ω–µ–µ {summ} —Ä—É–± –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ –∞–¥—Ä–µ—Å—É",
                    "",
                    f"–°—Å—ã–ª–∫–∞: {hlink(config.WALLET_QIWI, url=payment.invoice)}",
                    "",
                    "‚ÄºÔ∏è –ò –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞:",
                    hcode(payment.id)
                ]
            ),
            reply_markup=paid_keyboard()
        )
        await state.set_state("paid")
        await state.update_data(payment=payment)
    else:
        data = await state.get_data()
        currency = data.get("currency")
        await call.message.answer(
            "\n".join(
                [
                    f"–û–ø–ª–∞—Ç–∏—Ç–µ –Ω–µ –º–µ–Ω–µ–µ {summ} {currency} –ø–æ –Ω–æ–º–µ—Ä—É —Å—á–µ—Ç–∞:",
                    "",
                    f"{crypto.get_address(currency)}",
                    "",
                ]
            ),
            reply_markup=paid_keyboard()
        )
        await state.set_state("paidcrypto")
